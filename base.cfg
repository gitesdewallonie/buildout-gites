[buildout]
extends = http://dist.plone.org/release/4.2.5/versions.cfg
          https://raw.github.com/affinitic/affinitic.dist/master/plone425.cfg
          http://good-py.appspot.com/release/getpaid/0.10.4
          sources.cfg
          versions.cfg
          versions_prod.cfg
          port.cfg

extensions = mr.developer
sources-dir = devel
allow-picked-versions = false
always-checkout = false
auto-checkout =
    gites.calendar
    gites.core
    gites.db
    gites.gdwadmin
    gites.ldap
    gites.skin
    gites.theme
    gites.app
    gites.map
    gites.shop
    gites.locales
    gites.proprio
    gites.webservice
    z3c.sqlalchemy
    bnbelgium.skin
    affinitic.caching
    megrok.z3cform
    gites.ldapimport
    gites.imports
    Products.MailmanSubForm
    getpaid.ogone
    monet.mapsviewlet
    affinitic.db
    plone.widgets
    geoalchemy
    collective.z3cform.datepicker
    collective.fb
    sc.social.like
    pygeocoder
    Products.PloneGetPaid
    DocumentTemplate
parts =
    instance01
    zopepy
    omelette
    scripts
    test
    coverage-test
    i18n
    dependencies
    dependencychecker
    backup
versions = versions
index = http://pypi.affinitic.be/affinitic/packages/+simple/
allow-hosts = pypi.affinitic.be
              eggs.affinitic.be
              getpaid.googlecode.com
find-links += http://eggs.affinitic.be/
develop =
eggs +=
    gites.app
    Products.PloneHotfix20130618
zcml =
    gites.app
    gites.core-overrides
    gites.shop-overrides

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance01:eggs}

[instance01]
recipe = plone.recipe.zope2instance
user = admin:admin
verbose-security = on
environment-vars =
    PTS_LANGUAGES fr en nl it de
    zope_i18n_allowed_languages fr en nl it de
    zope_i18n_compile_mo_files true
    SA_MIN_LOG_SLOW_SQL 0.1
http-address = 5080
debug-mode = on
zcml = ${buildout:zcml}
eggs =
    ${buildout:eggs}

zcml-additional =
 <configure xmlns="http://namespaces.zope.org/zope"
            xmlns:passmgr="http://affinitic.be/passmgr">
    <passmgr:pwdfile name="pg"
             filename="pgpass"/>
    <passmgr:pwdfile name="googleapi"
             filename="googleapikey"/>
    <passmgr:pwdfile name="facebookapp"
             filename="facebookapppass"/>
    <passmgr:pwdfile name="facebookadmins"
             filename="facebookadmins"/>
    <passmgr:pwdfile name="embedly"
             filename="embedlykey"/>
 </configure>

[zopepy]
recipe = zc.recipe.egg
eggs = ${instance01:eggs}
interpreter = zopepy
scripts = zopepy

[scripts]
recipe = zc.recipe.egg:scripts
eggs = gites.ldapimport
       gites.calendar
       gites.core[scripts]
       gites.db[scripts]
       gites.webservice[scripts]
       alembic
       i18ndude
       z3c.dependencychecker

[test]
recipe = zc.recipe.testrunner
eggs = gites.db [test]
       gites.app [test]
       gites.shop [test]
       gites.imports [test]
       gites.webservice [test]
       ipdb
extra-paths =

[coverage-test]
recipe = zc.recipe.testrunner
eggs = gites.db [test]
       gites.app [test]
       gites.shop [test]
       gites.webservice [test]
       ipdb
defaults = ['--coverage', '${buildout:directory}/coverage', '--auto-progress']
extra-paths =

[domain]
gites =
    gites.app
    gites.core
    gites.db
    gites.gdwadmin
    gites.map
    gites.shop
    gites.theme

[i18n]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    set -x
    domain=gites
    localesdirectory="${buildout:directory}/devel/gites.locales/src/gites/locales/locales"
    src="${buildout:directory}/devel/"
    options=""
    exclude=""
    gites="${domain:gites}"
    if [ "$domain" == "gites" ]; then
        packages=$gites
        options="--merge2 $localesdirectory/gites-generated.pot"
        exclude="rss_template.pt metadata_edit_form.cpt metadirectives.py Discussion_Item.xml event.py sendtoform.py"
    fi
    potfile=$localesdirectory/$domain.pot
    potmanualfile=$localesdirectory/$domain-manual.pot
    cd $src
    ${buildout:directory}/bin/i18ndude rebuild-pot --pot $potfile --create $domain \
    --merge $potmanualfile $options --exclude="$exclude" $packages
    # > rebuild-$domain-pot.log 2>&1
    if [ ! -z "$fakedomain" ]; then
        ${buildout:directory}/bin/i18ndude filter $localesdirectory/gites.pot $localesdirectory/../locales/gites.pot > $localesdirectory/gites.pot_
        mv $localesdirectory/gites.pot_ $localesdirectory/gites.pot
    fi
    ${buildout:directory}/bin/i18ndude sync --pot $potfile $localesdirectory/*/*/$domain.po
output = ${buildout:bin-directory}/i18n
mode = 755

[dependencychecker]
recipe = collective.recipe.template
inline =
	#!/bin/bash
	set -x -e
	for i in `find ${buildout:directory}/devel -maxdepth 1 -type d -name 'gites.*'`
	do
	    cd $i
	    egg=`basename $i`
	    if [ -d 'src' ] ;
	    then
	      rm -f ${buildout:directory}/devel/$egg.dep.txt
	      ${buildout:bin-directory}/dependencychecker > ${buildout:directory}/devel/$egg.dep.txt
	    elif [ -d 'gites' ] ;
	    then
	      rm -f ${buildout:directory}/devel/$egg.dep.txt
	      ${buildout:bin-directory}/dependencychecker gites > ${buildout:directory}/devel/$egg.dep.txt
	    fi
	done;
output = ${buildout:bin-directory}/gites-dependencychecker
mode = 755

[dependencies]
recipe = z3c.recipe.depgraph
eggs = ${buildout:eggs}
variants = base tred
formats = png
dead-ends =
    Plone
    five.grok
    products.archetypes
re-dead-ends =
    Products*
    products*
    plone*
    zope*
    five*
    z3c*
    collective*
re-exclude =

[backup]
recipe = collective.recipe.backup
location = ${buildout:directory}/var/backup
snapshotlocation = ${buildout:directory}/var/snapshotbackups
blob_storage = ${buildout:directory}/var/blobstorage
backup_blobs = true
